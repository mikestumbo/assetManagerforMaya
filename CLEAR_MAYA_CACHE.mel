// Asset Manager - Maya Cache Cleaner & Fresh Install Script
// This script clears Maya cache files and ensures a clean installation
// Run this script in Maya's Script Editor before installing Asset Manager v1.2.0
//
// v1.2.0 Features: Revolutionary background color fix & multi-select functionality

global proc clearMayaCacheForAssetManager()
{
    print("\n=== Maya Cache Cleaner for Asset Manager ===\n");
    
    // Get Maya directories
    string $mayaUserDir = `internalVar -userAppDir`;
    string $mayaVersionDir = `internalVar -userPrefDir`;
    string $pluginsDir = $mayaUserDir + "plug-ins/";
    string $scriptsDir = $mayaUserDir + "scripts/";
    
    print("Maya User Directory: " + $mayaUserDir + "\n");
    print("Maya Preferences Directory: " + $mayaVersionDir + "\n");
    
    // Step 1: Unload existing Asset Manager plugin if loaded
    print("\\n--- Step 1: Unloading existing plugin ---\\n");
    string $loadedPlugins[] = `pluginInfo -query -listPlugins`;
    int $foundAssetManager = 0;
    
    for ($plugin in $loadedPlugins) {
        if (`gmatch $plugin "*assetManager*"`) {
            print("Found loaded Asset Manager plugin: " + $plugin + "\\n");
            if (`pluginInfo -query -loaded $plugin`) {
                unloadPlugin $plugin;
                print("Successfully unloaded: " + $plugin + "\\n");
                $foundAssetManager = 1;
            }
        }
    }
    
    if (!$foundAssetManager) {
        print("No Asset Manager plugin currently loaded.\\n");
    }
    
    // Step 2: Remove old plugin files
    print("\\n--- Step 2: Removing old plugin files ---\\n");
    string $filesToRemove[];
    $filesToRemove[0] = $pluginsDir + "assetManager.py";
    $filesToRemove[1] = $pluginsDir + "assetManager.pyc";
    $filesToRemove[2] = $pluginsDir + "assetManager.mod";
    $filesToRemove[3] = $pluginsDir + "icon_utils.py";
    $filesToRemove[4] = $pluginsDir + "icon_utils.pyc";
    $filesToRemove[5] = $pluginsDir + "assetManager_icon.png";
    $filesToRemove[6] = $pluginsDir + "assetManager_icon2.png";
    
    for ($file in $filesToRemove) {
        if (`filetest -f $file`) {
            sysFile -delete $file;
            print("Removed: " + $file + "\\n");
        }
    }
    
    // Step 3: Remove icons directory if it exists
    string $iconsDir = $pluginsDir + "icons/";
    if (`filetest -d $iconsDir`) {
        print("Removing icons directory: " + $iconsDir + "\\n");
        // Remove files in icons directory first
        string $iconFiles[] = `getFileList -folder $iconsDir`;
        for ($iconFile in $iconFiles) {
            if ($iconFile != "." && $iconFile != "..") {
                string $fullPath = $iconsDir + $iconFile;
                if (`filetest -f $fullPath`) {
                    sysFile -delete $fullPath;
                    print("Removed icon: " + $fullPath + "\\n");
                }
            }
        }
        // Remove the directory itself using system command
        string $removeCommand = "rmdir \"" + $iconsDir + "\"";
        system($removeCommand);
        print("Removed icons directory.\\n");
    }
    
    // Step 4: Clear Python cache files
    print("\\n--- Step 3: Clearing Python cache ---\\n");
    string $pycacheDir = $pluginsDir + "__pycache__/";
    if (`filetest -d $pycacheDir`) {
        print("Removing Python cache directory: " + $pycacheDir + "\\n");
        string $pycFiles[] = `getFileList -folder $pycacheDir`;
        for ($pycFile in $pycFiles) {
            if ($pycFile != "." && $pycFile != "..") {
                string $fullPath = $pycacheDir + $pycFile;
                sysFile -delete $fullPath;
                print("Removed cache file: " + $fullPath + "\\n");
            }
        }
        // Remove the directory itself using system command
        string $removeCommand = "rmdir \"" + $pycacheDir + "\"";
        system($removeCommand);
        print("Removed Python cache directory.\\n");
    }
    
    // Step 5: Clear Maya's internal plugin cache
    print("\\n--- Step 4: Refreshing Maya plugin system ---\\n");
    refreshAE;
    print("Refreshed Attribute Editor.\\n");
    
    // Force refresh of plugin manager
    if (`window -exists "PluginManager"`) {
        deleteUI "PluginManager";
        print("Closed Plugin Manager window.\\n");
    }
    
    // Step 6: Clear any shelf buttons
    print("\\n--- Step 5: Removing old shelf buttons ---\\n");
    global string $gShelfTopLevel;
    string $shelves[] = `tabLayout -query -childArray $gShelfTopLevel`;
    
    for ($shelf in $shelves) {
        if (`shelfLayout -exists $shelf`) {
            string $buttons[] = `shelfLayout -query -childArray $shelf`;
            for ($button in $buttons) {
                if (`shelfButton -exists $button`) {
                    string $label = `shelfButton -query -label $button`;
                    string $annotation = `shelfButton -query -annotation $button`;
                    
                    if (`gmatch $label "*Asset Manager*"` || `gmatch $annotation "*Asset Manager*"`) {
                        print("Removing old shelf button: " + $button + " from " + $shelf + "\\n");
                        deleteUI $button;
                    }
                }
            }
        }
    }
    
    // Step 7: Clear Maya preferences for the plugin
    print("\\n--- Step 6: Clearing plugin preferences ---\\n");
    if (`optionVar -exists "assetManagerAutoLoad"`) {
        optionVar -remove "assetManagerAutoLoad";
        print("Cleared assetManagerAutoLoad preference.\\n");
    }
    
    // Step 8: Force Python module cleanup
    print("\\n--- Step 7: Cleaning Python module cache ---\\n");
    python("import sys; modules_to_remove = [m for m in list(sys.modules.keys()) if 'assetManager' in m.lower()]; [sys.modules.pop(module, None) for module in modules_to_remove]; print('Removed ' + str(len(modules_to_remove)) + ' Asset Manager modules from cache.') if modules_to_remove else print('No Asset Manager modules found in cache.')");
    
    print("\\n=== Cache cleaning completed! ===\\n");
    print("Maya is now ready for a fresh Asset Manager v1.2.0 installation.\\n");
    print("Please restart Maya before installing the new version.\\n");
    print("\\nTo install Asset Manager v1.2.0:");
    print("1. Restart Maya");
    print("2. Drag the DRAG&DROP.mel file into Maya's viewport");
    print("3. The plugin will install automatically\\n");
    print("\\nðŸŽ¨ v1.2.0 NEW: Background colors are now guaranteed visible in all Maya themes!");
    print("ðŸŽ¯ v1.2.0 NEW: Professional multi-select with Ctrl+Click, Shift+Click, Ctrl+A\\n");
}

// Run the cache cleaner
clearMayaCacheForAssetManager();
