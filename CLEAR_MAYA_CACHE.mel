// Asset Manager Maya Cache Cleaner v1.4.0
// Run this script in Maya's Script Editor before installing Asset Manager v1.4.0

global proc clearMayaCacheForAssetManager()
{
    print("\n=== Maya Cache Cleaner for Asset Manager v1.4.0 ===\n");
    
    // Get Maya directories with robust path handling
    string $scriptsDir = `internalVar -userScriptDir`;
    print("Maya Scripts Directory: " + $scriptsDir + "\n");
    
    // Define multiple possible Asset Manager locations
    string $possiblePaths[];
    $possiblePaths[0] = $scriptsDir + "assetManager/";
    $possiblePaths[1] = $scriptsDir + "../scripts/assetManager/";
    
    // Check OneDrive path specifically for this user
    string $oneDrivePath = "C:/Users/ChEeP/OneDrive/Documents/maya/scripts/assetManager/";
    $possiblePaths[2] = $oneDrivePath;
    
    // Find actual Asset Manager installation
    string $assetManagerDir = "";
    for ($path in $possiblePaths) {
        print("Checking path: " + $path + "\n");
        if (`filetest -d $path`) {
            $assetManagerDir = $path;
            print("[OK] Found Asset Manager at: " + $assetManagerDir + "\n");
            break;
        } else {
            print("[NOT FOUND] Path: " + $path + "\n");
        }
    }
    
    // Clean up Python module cache
    print("\n--- Cleaning Python module cache ---\n");
    python("import sys");
    python("print('Python sys.modules before cleanup:', len(sys.modules))");
    python("modules = [m for m in list(sys.modules.keys()) if any(keyword in m.lower() for keyword in ['asset', 'emsa', 'standalone'])]");
    python("print('Found Asset Manager modules:', modules)");
    python("for m in modules: sys.modules.pop(m, None)");
    python("print('[OK] Cleaned Asset Manager modules from cache')");
    python("print('Python sys.modules after cleanup:', len(sys.modules))");
    
    // Clear Python bytecode cache with better error handling
    print("\n--- Clearing Python bytecode cache ---\n");
    python("import os, shutil");
    python("cache_paths = [r'C:\\Users\\ChEeP\\OneDrive\\Documents\\maya\\scripts\\assetManager\\__pycache__', r'C:\\Users\\ChEeP\\OneDrive\\Documents\\maya\\scripts\\assetManager\\src\\__pycache__']");
    python("for cache_path in cache_paths:\n    if os.path.exists(cache_path):\n        try:\n            shutil.rmtree(cache_path)\n            print('[OK] Cleared cache: ' + cache_path)\n        except Exception as e:\n            print('[ERROR] Could not clear ' + cache_path + ': ' + str(e))\n    else:\n        print('[INFO] Cache not found: ' + cache_path)");
    
    // Force garbage collection
    python("import gc; collected = gc.collect(); print('[OK] Garbage collection completed - collected ' + str(collected) + ' objects')");
    
    // Remove current Asset Manager installation with better error handling
    print("\n--- Removing current Asset Manager installation ---\n");
    
    if ($assetManagerDir != "" && `filetest -d $assetManagerDir`) {
        print("Found Asset Manager installation: " + $assetManagerDir + "\n");
        
        // Step 1: Verify directory exists (Fail Fast principle)
        python("import os, shutil, sys");
        python("asset_dir = r'" + $assetManagerDir + "'");
        python("print('[DEBUG] Target directory: ' + asset_dir)");
        python("print('[DEBUG] Directory exists: ' + str(os.path.exists(asset_dir)))");
        
        // Step 2: Check if directory is accessible (Single Responsibility)
        python("if os.path.exists(asset_dir): print('[DEBUG] Directory is accessible'); os.listdir(asset_dir)[:3]");
        
        // Step 3: Attempt removal with read-only file handling (Single Responsibility)
        python("removal_success = True");
        python("removal_error = ''");
        python("import stat");
        python("def handle_remove_readonly(func, path, exc): os.chmod(path, stat.S_IWRITE); func(path)");
        python("if os.path.exists(asset_dir): \n  try: \n    shutil.rmtree(asset_dir, onerror=handle_remove_readonly) \n  except Exception as e: \n    removal_success = False; removal_error = str(e)");
        
        // Step 4: Report removal results (Clear Error Messages principle)
        python("if removal_success: print('[OK] Directory removal completed')");
        python("if not removal_success: print('[ERROR] Could not remove directory: ' + removal_error)");
        
        // Step 5: Verify removal was successful (Fail Fast verification)
        python("if os.path.exists(asset_dir): print('[FAILED] Directory still exists!'); print('[ACTION] Please close Maya and manually delete the directory')");
        python("if not os.path.exists(asset_dir): print('[VERIFIED] Directory successfully removed')");
        
    } else {
        print("[INFO] No current Asset Manager installation found to remove.\n");
    }
    
    // Clear shelf buttons with better error handling
    print("\n--- Removing old shelf buttons ---\n");
    global string $gShelfTopLevel;
    
    if (`control -exists $gShelfTopLevel`) {
        string $shelves[] = `tabLayout -query -childArray $gShelfTopLevel`;
        int $buttonsRemoved = 0;
        
        for ($shelf in $shelves) {
            if (`shelfLayout -exists $shelf`) {
                string $buttons[] = `shelfLayout -query -childArray $shelf`;
                for ($button in $buttons) {
                    if (`shelfButton -exists $button`) {
                        string $label = `shelfButton -query -label $button`;
                        
                        if (`gmatch $label "*Asset Manager*"` || `gmatch $label "*Asset*"`) {
                            print("Removing shelf button: " + $button + " (Label: " + $label + ")\n");
                            deleteUI $button;
                            $buttonsRemoved++;
                        }
                    }
                }
            }
        }
        
        if ($buttonsRemoved > 0) {
            print("[OK] Removed " + $buttonsRemoved + " old shelf buttons\n");
        } else {
            print("[INFO] No Asset Manager shelf buttons found to remove\n");
        }
    } else {
        print("[WARN] Shelf system not available\n");
    }
    
    print("\n=== Cache cleaning completed! ===\n");
    print("[OK] Maya is now ready for Asset Manager v1.3.0 installation.\n");
    print("\n[INSTALL] INSTALLATION INSTRUCTIONS:\n");
    print("1. Drag DRAG&DROP.mel into Maya viewport\n");
    print("2. Watch for installation success messages\n");
    print("3. Look for Asset Manager shelf button\n");
    print("4. Click the button to launch Asset Manager v1.3.0\n");
    
    print("\n[FEATURES] v1.3.0 HIGHLIGHTS:\n");
    print("* Version-agnostic installation (works across Maya versions)");
    print("* Simplified architecture - No Maya plugin registration!");
    print("* Pure UI module - Eliminates 'unknown data' issues!");
    print("* Main scripts directory - Future-proof structure!");
    print("* Professional custom screenshot icon!");
    print("* Complete EMSA architecture support!");
    print("* Immediate activation - No restart required!");
    print("* Maya 2025+ PySide6 exclusive!");
    print("* Production-ready deployment with Clean Code!\n");
    
    // Verify Maya is ready
    python("print('\\n[SYSTEM] SYSTEM CHECK:')");
    python("import sys; print('[OK] Python version: ' + sys.version.split()[0])");
    python("try:\n\timport PySide6\n\tprint('[OK] PySide6 available')\nexcept ImportError:\n\tprint('[WARN] PySide6 not available - Maya 2025+ required')");
    python("print('[READY] System ready for Asset Manager v1.3.0!\\n')");
}

// Run the cache cleaner
clearMayaCacheForAssetManager();
