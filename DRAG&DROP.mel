// Asset Manager Professional Installer v1.4.0 - Simplified Structure
// Drag this file into Maya viewport to install

global proc createProfessionalButton(string $installDir)
{
    global string $gShelfTopLevel;
    
    if ($gShelfTopLevel == "") {
        print("Shelf not available\n");
        return;
    }
    
    // Activate module for immediate use
    python("import sys");
    python("path = r'" + $installDir + "'");
    python("if path not in sys.path: sys.path.insert(0, path)");
    python("print('Module activated for immediate use')");
    
    python("try: import assetManager; print('Asset Manager ready!')\nexcept Exception as e: print('Import issue:', str(e))");
    
    string $shelf = `tabLayout -query -selectTab $gShelfTopLevel`;
    if ($shelf == "") {
        string $shelves[] = `tabLayout -query -childArray $gShelfTopLevel`;
        if (size($shelves) > 0) {
            $shelf = $shelves[0];
        } else {
            print("No shelf found\n");
            return;
        }
    }
    
    print("Install directory: " + $installDir + "\n");
    
    // First, let's see what files are actually in the install directory
    python("import os; files = os.listdir(r'" + $installDir + "'); print('Files in install dir:', files)");
    
    // Try multiple icon path approaches
    string $mainIcon1 = $installDir + "assetManager_icon.png";
    string $hoverIcon1 = $installDir + "assetManager_icon2.png";
    
    // Convert to Windows-style paths
    string $mainIcon2 = `substitute "/" $installDir "\\"` + "assetManager_icon.png";
    string $hoverIcon2 = `substitute "/" $installDir "\\"` + "assetManager_icon2.png";
    
    print("Testing icon paths:\n");
    print("  Path 1 (Unix): " + $mainIcon1 + "\n");
    print("  Path 2 (Win):  " + $mainIcon2 + "\n");
    
    string $mainIcon, $hoverIcon;
    
    if (`filetest -r $mainIcon1`) {
        print("Found icons using Unix-style paths!\n");
        $mainIcon = $mainIcon1;
        $hoverIcon = $hoverIcon1;
    } else if (`filetest -r $mainIcon2`) {
        print("Found icons using Windows-style paths!\n");
        $mainIcon = $mainIcon2;
        $hoverIcon = $hoverIcon2;
    } else {
        print("Icons not found in install directory, checking source...\n");
        
        // Use the same baseDir logic to find source icons
        string $possibleIconPaths[] = {
            "C:/Users/ChEeP/OneDrive/Documents/Mike Stumbo plugins/assetManagerforMaya-master/icons/assetManager_icon.png",
            (`getenv "USERPROFILE"` + "/OneDrive/Documents/Mike Stumbo plugins/assetManagerforMaya-master/icons/assetManager_icon.png"),
            (`getenv "USERPROFILE"` + "/Documents/Mike Stumbo plugins/assetManagerforMaya-master/icons/assetManager_icon.png")
        };
        
        int $iconFound = 0;
        for ($iconPath in $possibleIconPaths) {
            if (`filetest -r $iconPath`) {
                print("Using source icons from: " + `dirname $iconPath` + "\n");
                $mainIcon = $iconPath;
                $hoverIcon = `substitute "assetManager_icon.png" $iconPath "assetManager_icon2.png"`;
                $iconFound = 1;
                break;
            }
        }
        
        if (!$iconFound) {
            print("No custom icons found, using Maya defaults\n");
            $mainIcon = "commandButton.png";
            $hoverIcon = "commandButton.png";
        }
    }
    
    print("Final icon paths:\n");
    print("  Main: " + $mainIcon + "\n");
    print("  Hover: " + $hoverIcon + "\n");
    
    string $command = "try:\n    import assetManager\n    assetManager.show_asset_manager()\nexcept Exception as e:\n    print('Error:', str(e))\n    import maya.cmds as cmds\n    cmds.confirmDialog(title='Asset Manager', message='Loading error: ' + str(e), button='OK')";
    
    shelfButton
        -parent $shelf
        -label "Asset Manager"
        -annotation "Asset Manager v1.3.0 Professional\nCustom icons with hover effects\nClick to launch Asset Manager UI"
        -image $mainIcon
        -highlightImage $hoverIcon
        -command $command
        -sourceType "python"
        -style "iconOnly";
    
    print("Professional button created with custom icons!\n");
}

global proc copyAssetFile(string $src, string $dst)
{
    if (`filetest -f $src`) {
        sysFile -copy $dst $src;
        print("Copied: " + `basename $src ""` + "\n");
    } else {
        print("Missing: " + `basename $src ""` + " (optional)\n");
    }
}

global proc copySourceDirectory(string $src, string $dst)
{
    if (!`filetest -d $src`) {
        print("Source directory not found\n");
        return;
    }
    
    if (!`filetest -d $dst`) {
        sysFile -makeDir $dst;
    }
    
    string $cmd = "robocopy \"" + $src + "\" \"" + $dst + "\" /E /NFL /NDL /NJH /NJS /nc /ns /np";
    system($cmd);
    print("EMSA architecture copied\n");
}

global proc showSuccessDialog()
{
    confirmDialog
        -title "Asset Manager v1.3.0 - Installer"
        -message "Asset Manager Installed Successfully!\n\nAuto-load enabled - Asset Manager will be available on Maya startup."
        -button "OK"
        -defaultButton "OK"
        -icon "information";
}

global proc setupAutoLoad(string $installDir)
{
    // Setup auto-load by adding to userSetup.py
    string $mayaScripts = `internalVar -userScriptDir`;
    string $userSetupPath = $mayaScripts + "userSetup.py";
    
    print("Configuring auto-load for Asset Manager...\n");
    
    // Python code to add Asset Manager to path on startup
    string $autoLoadCode = (
        "\n# Asset Manager v1.3.0 - Auto-load Configuration\n" +
        "# Added by DRAG&DROP.mel installer\n" +
        "import sys\n" +
        "from pathlib import Path\n" +
        "\n" +
        "asset_manager_path = r'" + $installDir + "'\n" +
        "if asset_manager_path not in sys.path:\n" +
        "    sys.path.insert(0, asset_manager_path)\n" +
        "    print('[OK] Asset Manager v1.3.0 path added - Ready for use')\n" +
        "\n" +
        "# Optional: Uncomment to auto-launch Asset Manager on Maya startup\n" +
        "# try:\n" +
        "#     import assetManager\n" +
        "#     assetManager.show_asset_manager()\n" +
        "#     print('[OK] Asset Manager v1.3.0 launched automatically')\n" +
        "# except Exception as e:\n" +
        "#     print('[ERROR] Asset Manager auto-launch failed:', str(e))\n"
    );
    
    // Check if userSetup.py exists
    if (`filetest -r $userSetupPath`) {
        // Read existing content
        print("Existing userSetup.py found, checking content...\n");
        
        python("import os");
        python("userSetup_path = r'" + $userSetupPath + "'");
        python("try:\n" +
               "    with open(userSetup_path, 'r', encoding='utf-8') as f:\n" +
               "        content = f.read()\n" +
               "    has_asset_manager = 'Asset Manager v1.3.0' in content\n" +
               "    print('Asset Manager config in userSetup:', has_asset_manager)\n" +
               "except Exception as e:\n" +
               "    print('Error reading userSetup.py:', str(e))\n" +
               "    has_asset_manager = False\n"
        );
        
        // If Asset Manager not already configured, add it
        python("if not has_asset_manager:\n" +
               "    try:\n" +
               "        with open(userSetup_path, 'a', encoding='utf-8') as f:\n" +
               "            f.write(r'''" + $autoLoadCode + "''')\n" +
               "        print('[OK] Asset Manager auto-load added to userSetup.py')\n" +
               "    except Exception as e:\n" +
               "        print('[ERROR] Failed to update userSetup.py:', str(e))\n" +
               "else:\n" +
               "    print('[OK] Asset Manager auto-load already configured')\n"
        );
        
    } else {
        // Create new userSetup.py
        print("Creating new userSetup.py with Asset Manager auto-load...\n");
        
        python("userSetup_path = r'" + $userSetupPath + "'");
        python("auto_load_code = r'''" + $autoLoadCode + "'''");
        python("try:\n" +
               "    with open(userSetup_path, 'w', encoding='utf-8') as f:\n" +
               "        f.write('# Maya User Setup Script\\n')\n" +
               "        f.write('# This file is executed when Maya starts\\n\\n')\n" +
               "        f.write(auto_load_code)\n" +
               "    print('[OK] Created userSetup.py with Asset Manager auto-load')\n" +
               "except Exception as e:\n" +
               "    print('[ERROR] Failed to create userSetup.py:', str(e))\n"
        );
    }
    
    print("[OK] Auto-load configuration complete\n");
}

global proc DRAG_DROP_assetManager_installer()
{
    print("Asset Manager Professional Installer v1.3.0\n");
    
    // Robust source directory detection
    string $baseDir = "";
    
    // Method 1: Try to get the directory where this MEL file is located
    string $melInfo = `whatIs "DRAG_DROP_assetManager_installer"`;
    print("MEL info: " + $melInfo + "\n");
    
    // Method 2: Use known pattern - look for typical Asset Manager installation paths
    string $possiblePaths[] = {
        "C:/Users/ChEeP/OneDrive/Documents/Mike Stumbo plugins/assetManagerforMaya-master",
        `getenv "USERPROFILE"` + "/OneDrive/Documents/Mike Stumbo plugins/assetManagerforMaya-master",
        `getenv "USERPROFILE"` + "/Documents/Mike Stumbo plugins/assetManagerforMaya-master"
    };
    
    // Test each possible path
    for ($path in $possiblePaths) {
        print("Testing path: " + $path + "\n");
        if (`filetest -d $path` && `filetest -f ($path + "/setup.py")`) {
            $baseDir = $path;
            print("Found valid source directory: " + $baseDir + "\n");
            break;
        }
    }
    
    // Final fallback: ask user to verify the path
    if ($baseDir == "" || !`filetest -d $baseDir`) {
        print("ERROR: Could not auto-detect source directory\n");
        print("Please ensure the plugin is located at one of these paths:\n");
        for ($path in $possiblePaths) {
            print("  " + $path + "\n");
        }
        return;
    }
    
    print("Using unified installation system...\n");
    
    // Use the unified Python installer as single source of truth
    python("import sys");
    python("sys.path.insert(0, r'" + $baseDir + "')");
    python("import setup");
    python("success = setup.install_asset_manager(r'" + $baseDir + "', verbose=True)");
    python("print('Installation completed')");
    
    // Get installation directory for Maya-specific tasks
    // Use dual-path detection for OneDrive and regular Documents support
    string $mayaScripts = `internalVar -userScriptDir`;
    string $userProfile = `getenv "USERPROFILE"`;
    
    // Check both possible Maya scripts locations (matches setup.py logic)
    string $possibleMayaScripts[] = {
        ($userProfile + "/OneDrive/Documents/maya/scripts/"),
        ($userProfile + "/Documents/maya/scripts/")
    };
    
    string $mayaBase = "";
    
    // First, check if we can determine the location from Maya's internal var
    for ($possiblePath in $possibleMayaScripts) {
        if (`startsWith $mayaScripts $possiblePath`) {
            // Extract base path and use general scripts directory
            $mayaBase = $possiblePath;
            print("Detected Maya scripts location: " + $mayaBase + "\n");
            break;
        }
    }
    
    // If not detected from internal var, check which location exists or can be used
    if ($mayaBase == "") {
        for ($possiblePath in $possibleMayaScripts) {
            if (`filetest -d $possiblePath` || `filetest -d (dirname($possiblePath))`) {
                $mayaBase = $possiblePath;
                if (`match "*OneDrive*" $possiblePath` != "") {
                    print("Using OneDrive Maya scripts location (recommended): " + $mayaBase + "\n");
                } else {
                    print("Using regular Maya scripts location: " + $mayaBase + "\n");
                }
                break;
            }
        }
    }
    
    // Final fallback to version-specific directory if general doesn't exist
    if ($mayaBase == "") {
        string $versionMayaScripts = `internalVar -userScriptDir`;
        $mayaBase = `dirname $versionMayaScripts` + "/";
        print("Fallback to version-specific location: " + $mayaBase + "\n");
    }
    
    string $installDir = $mayaBase + "assetManager/";
    
    print("Using Maya scripts directory: " + $mayaBase + "\n");
    print("Target install directory: " + $installDir + "\n");
    
    // Verify this directory exists and has our files
    if (`filetest -d $installDir`) {
        print("Installation directory confirmed: " + $installDir + "\n");
    } else {
        print("INFO: Checking alternative installation locations...\n");
        
        // Check both possible Maya scripts locations for existing installation
        string $altDirs[] = {
            (`getenv "USERPROFILE"` + "/OneDrive/Documents/maya/scripts/assetManager/"),
            (`getenv "USERPROFILE"` + "/Documents/maya/scripts/assetManager/"),
            (`getenv "USERPROFILE"` + "/Documents/maya/2025.3/scripts/assetManager/"),
            (`getenv "USERPROFILE"` + "/Documents/maya/2025/scripts/assetManager/")
        };
        
        for ($altDir in $altDirs) {
            if (`filetest -d $altDir`) {
                print("Found existing installation at: " + $altDir + "\n");
                $installDir = $altDir;
                break;
            }
        }
        
        if (!`filetest -d $installDir`) {
            print("Installation will be created by Python installer at: " + $installDir + "\n");
        }
    }
    
    print("Creating professional shelf button...\n");
    
    // Create professional shelf button (Maya-specific functionality)
    createProfessionalButton($installDir);
    
    print("Configuring auto-load on Maya startup...\n");
    
    // Setup auto-load configuration
    setupAutoLoad($installDir);
    
    print("===========================================\n");
    print("PROFESSIONAL INSTALLATION COMPLETE!\n");
    print("===========================================\n");
    print("Asset Manager v1.3.0 installed successfully\n");
    print("Professional icons and EMSA architecture ready\n");
    print("Module activated for immediate use\n");
    print("Auto-load enabled for Maya startup\n");
    print("Professional shelf button created\n");
    print("===========================================\n");
    print("READY FOR PRODUCTION USE!\n");
    print("===========================================\n");
    
    showSuccessDialog();
}

// Auto-execute the installer when file is sourced
print("Starting Professional Asset Manager Installer...\n");
DRAG_DROP_assetManager_installer();